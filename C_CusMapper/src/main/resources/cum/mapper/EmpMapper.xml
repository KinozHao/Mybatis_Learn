<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cum.mapper.EmpMapper">
        <select id="allEmpByTable" resultType="employee">
            select * from ${TableName}
        </select>

        <!--使用字段别名-->
        <select id="allEmpByAlias"  resultType="employee">
            select e_id id,e_name name,age age,sex sex,email mail from mybatisframe.employee;
        </select>

        <!--重点！！常用！！-->
        <!--当java属性和sql字段不同时,通过resultMap来设置自定义映射-->
        <resultMap id="for_allEmp" type="employee">
            <id property="id" column="e_id"/>
            <result property="name" column="e_name"/>
            <result property="age" column="age"/>
            <result property="sex" column="sex"/>
            <result property="mail" column="email"/>
        </resultMap>
        <select id="allEmpByResultMap" resultMap="for_allEmp">
            select * from mybatisframe.employee;
        </select>

        <!--处理多对一映射关系-->
        <!--1、通过级联方式-->
        <resultMap id="empAndDepCon" type="employee">
            <id property="id" column="e_id"/>
            <result property="name" column="e_name"/>
            <result property="age" column="age"/>
            <result property="sex" column="sex"/>
            <result property="mail" column="email"/>
            <!--部门属性id和字段id对应
                部门属性name和字段name对应-->
            <result property="dept.d_id" column="d_id"/>
            <result property="dept.d_name" column="d_name"/>
        </resultMap>

        <!--2、通过association标签-->
        <resultMap id="empAndDepAss" type="employee">
            <id property="id" column="e_id"/>
            <result property="name" column="e_name"/>
            <result property="age" column="age"/>
            <result property="sex" column="sex"/>
            <result property="mail" column="email"/>
            <!--property需要处理多对的映射关系的属性名
                javaType上述属性的类型-->
            <association property="dept" javaType="Department">
                <!--把属性和字段进行对应-->
                <id property="d_id" column="d_id"/>
                <id property="d_name" column="d_name"/>
            </association>
        </resultMap>

        <!--级联查询SQL代码-->
        <select id="getEmpAndDep" resultMap="empAndDepCon">
            select * from employee
            left join department
            on employee.d_id = department.d_id
            where employee.e_id = #{eid}
        </select>

        <!--3、分步查询-->
        <resultMap id="empAndDepStep" type="employee">
            <id property="id" column="e_id"/>
            <result property="name" column="e_name"/>
            <result property="age" column="age"/>
            <result property="sex" column="sex"/>
            <result property="mail" column="email"/>
            <!--select:设置分步查询的sql的唯一标识(namespace.sqlId或者mapper接口的全类名-->
            <!--column:设置分步查询的条件-->
            <association property="dept" select="cum.mapper.DeptMapper.getEmpAndDepByStep" column="d_id"/>
        </resultMap>

        <select id="getEmpAndDepByStep" resultMap="empAndDepStep">
            select * from employee where e_id = #{eid}
        </select>
</mapper>   
    